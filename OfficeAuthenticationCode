#include <Keypad.h>
#include <LiquidCrystal.h>
#include <Servo.h>

Servo myservo;

LiquidCrystal lcd(A0, A1, A2, A3, A4, A5);

#define ID_LENGTH 5
#define DATABASE_SIZE 12

char ID[ID_LENGTH + 1];

struct User {
  char id[ID_LENGTH + 1];
  String name;
};

User database[DATABASE_SIZE] = {
  {"1001", "Rajiv"},
  {"1002", "Suresh"},
  {"1003", "Ruchika"},
  {"1004", "Bharath"},
  {"1005", "Arjun"},
  {"1006", "Ram"},
  {"1007", "Navya"},
  {"1008", "Pooja"},
  {"1009", "James"},
  {"1010", "Rizwan"},
  {"99999", "Lavanya"},
  {"88888", "Vinod"}
};

const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'},
  {'*', '0', '#'}
};

byte rowPins[ROWS] = {1, 2, 3, 4};
byte colPins[COLS] = {5, 6, 7, 8};

Keypad customKeypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS);

int numPeopleEntered = 0;
bool enteredIDs[DATABASE_SIZE] = {false};

void setup() {
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(12, OUTPUT);

  myservo.attach(9);
  ServoClose();
  lcd.begin(16, 2);
  lcd.print("  Office Access");
  lcd.setCursor(0, 1);
  lcd.print("--Enter ID--");
  delay(3000);
  lcd.clear();
}

void loop() {
  lcd.setCursor(0, 0);
  lcd.print("Enter ID: ");
  
  char key;
  byte count = 0;
  unsigned long startTime = millis();
  
  while (count < ID_LENGTH && millis() - startTime < 10000) {
    key = customKeypad.getKey();
    if (key) {
      ID[count++] = key;
      lcd.print(key);
      delay(200);
    }
  }
  
  ID[count] = '\0';
  
  String name = findName(ID);
  bool alreadyEntered = enteredIDs[atoi(ID) - 1001];
  
  lcd.setCursor(0, 1);
  if (name != "" && !alreadyEntered) {
    lcd.print("Welcome ");
    lcd.print(name);
    digitalWrite(11, HIGH);
    digitalWrite(10, LOW);
    ServoOpen();
    numPeopleEntered++;
    enteredIDs[atoi(ID) - 1001] = true;
    delay(5000);
    digitalWrite(10, LOW);
    digitalWrite(11, LOW);
    ServoClose();
  } else if (strcmp(ID, "1111") == 0) {
    lcd.clear();
    lcd.print("Total: ");
    lcd.print(numPeopleEntered);
    lcd.print("/");
    lcd.print(DATABASE_SIZE);
    delay(5000);
  } else if (strcmp(ID, "0404") == 0) {
    lcd.clear();
    lcd.print("Enter Admin ID:");
    delay(1000);
    char adminKey[ID_LENGTH + 1];
    byte adminCount = 0;
    unsigned long adminStartTime = millis();
    while (adminCount < ID_LENGTH && millis() - adminStartTime < 10000) {
      key = customKeypad.getKey();
      if (key) {
        adminKey[adminCount++] = key;
        lcd.print('*');
        delay(200);
      }
    }
    adminKey[adminCount] = '\0';
    if (isAdmin(adminKey)) {
      numPeopleEntered = 0;
      memset(enteredIDs, false, sizeof(enteredIDs));
      lcd.clear();
      lcd.print("Reset Successful");
      digitalWrite(12,HIGH);
      delay(3000);
            digitalWrite(12,LOW);

    } else {
      lcd.clear();
      lcd.print("Invalid Admin ID");
      delay(3000);
    }
  } else if (alreadyEntered) {
    lcd.print("Already entered");
        digitalWrite(12,HIGH);
    delay(3000);
                digitalWrite(12,LOW);

  } else {
    lcd.print("Invalid user");
    digitalWrite(10, HIGH);
    digitalWrite(11, LOW);
    delay(5000);
    digitalWrite(10, LOW);
    digitalWrite(11, LOW);
  }

  lcd.clear();
  memset(ID, 0, sizeof(ID));
}

String findName(const char* id) {
  for (int i = 0; i < DATABASE_SIZE; ++i) {
    if (strcmp(database[i].id, id) == 0) {
      return database[i].name;
    }
  }
  return "";
}

bool isAdmin(const char* id) {
  for (int i = 0; i < DATABASE_SIZE; ++i) {
    if (strcmp(database[i].id, id) == 0) {
      if (id[0] == '9') {
        return true;
      }
    }
  }
  return false;
}

void ServoOpen() {
  for (int pos = 0; pos <= 180; pos += 5) {
    myservo.write(pos);
    delay(15);
  }
}

void ServoClose() {
  for (int pos = 180; pos >= 0; pos -= 5) {
    myservo.write(pos);
    delay(15);
  }
}
